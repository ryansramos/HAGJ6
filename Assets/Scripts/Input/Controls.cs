//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""c916d5ce-eb6f-44f9-b47a-a52fe86561b0"",
            ""actions"": [
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""fc5b8a4d-7668-4b12-9c3a-db80e43d0c0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""60e345d8-77f3-48a1-ad4d-ec21751561a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""98e29096-524d-49dc-ab48-37c2902e991d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""904a600d-e40d-4265-b7e6-648cbbe1976d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ResetPrimary"",
                    ""type"": ""Button"",
                    ""id"": ""6662788d-c80e-4684-939f-cea25f6daccf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetSecondary"",
                    ""type"": ""Button"",
                    ""id"": ""91c1b518-2cb1-42fd-9dee-f891f5e370b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e56a0d81-b362-428d-beab-c050b14eaae7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""default"",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8610e923-6697-4f70-bef1-e15cd338b488"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""default"",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dfd57c0a-6a7c-4346-b3c1-000933aa78e8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""default"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d65a7270-24d5-47ec-ac0a-403e3c05ba4b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""default"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e34bb286-3a6d-4105-a026-f3fd30d92c14"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ecfd9793-edfc-4f9d-b890-fcbbccbf5c3c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetSecondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus"",
            ""id"": ""fb67e836-4f45-4237-bd0d-681d7ae62efb"",
            ""actions"": [
                {
                    ""name"": ""Proceed"",
                    ""type"": ""Button"",
                    ""id"": ""322fac4b-5b31-4bd0-b479-fb6d5884aed8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4e10f63-2c00-4fc9-acc5-2167fcb9e5dc"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Proceed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""172527f0-41dc-4676-b321-6a0f08ea39f2"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""default"",
                    ""action"": ""Proceed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""default"",
            ""bindingGroup"": ""default"",
            ""devices"": []
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Primary = m_Gameplay.FindAction("Primary", throwIfNotFound: true);
        m_Gameplay_Secondary = m_Gameplay.FindAction("Secondary", throwIfNotFound: true);
        m_Gameplay_Interact = m_Gameplay.FindAction("Interact", throwIfNotFound: true);
        m_Gameplay_Aim = m_Gameplay.FindAction("Aim", throwIfNotFound: true);
        m_Gameplay_ResetPrimary = m_Gameplay.FindAction("ResetPrimary", throwIfNotFound: true);
        m_Gameplay_ResetSecondary = m_Gameplay.FindAction("ResetSecondary", throwIfNotFound: true);
        // Menus
        m_Menus = asset.FindActionMap("Menus", throwIfNotFound: true);
        m_Menus_Proceed = m_Menus.FindAction("Proceed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Primary;
    private readonly InputAction m_Gameplay_Secondary;
    private readonly InputAction m_Gameplay_Interact;
    private readonly InputAction m_Gameplay_Aim;
    private readonly InputAction m_Gameplay_ResetPrimary;
    private readonly InputAction m_Gameplay_ResetSecondary;
    public struct GameplayActions
    {
        private @Controls m_Wrapper;
        public GameplayActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Primary => m_Wrapper.m_Gameplay_Primary;
        public InputAction @Secondary => m_Wrapper.m_Gameplay_Secondary;
        public InputAction @Interact => m_Wrapper.m_Gameplay_Interact;
        public InputAction @Aim => m_Wrapper.m_Gameplay_Aim;
        public InputAction @ResetPrimary => m_Wrapper.m_Gameplay_ResetPrimary;
        public InputAction @ResetSecondary => m_Wrapper.m_Gameplay_ResetSecondary;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Primary.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPrimary;
                @Primary.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPrimary;
                @Primary.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPrimary;
                @Secondary.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSecondary;
                @Secondary.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSecondary;
                @Secondary.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSecondary;
                @Interact.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
                @Aim.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAim;
                @ResetPrimary.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnResetPrimary;
                @ResetPrimary.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnResetPrimary;
                @ResetPrimary.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnResetPrimary;
                @ResetSecondary.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnResetSecondary;
                @ResetSecondary.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnResetSecondary;
                @ResetSecondary.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnResetSecondary;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Primary.started += instance.OnPrimary;
                @Primary.performed += instance.OnPrimary;
                @Primary.canceled += instance.OnPrimary;
                @Secondary.started += instance.OnSecondary;
                @Secondary.performed += instance.OnSecondary;
                @Secondary.canceled += instance.OnSecondary;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @ResetPrimary.started += instance.OnResetPrimary;
                @ResetPrimary.performed += instance.OnResetPrimary;
                @ResetPrimary.canceled += instance.OnResetPrimary;
                @ResetSecondary.started += instance.OnResetSecondary;
                @ResetSecondary.performed += instance.OnResetSecondary;
                @ResetSecondary.canceled += instance.OnResetSecondary;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // Menus
    private readonly InputActionMap m_Menus;
    private IMenusActions m_MenusActionsCallbackInterface;
    private readonly InputAction m_Menus_Proceed;
    public struct MenusActions
    {
        private @Controls m_Wrapper;
        public MenusActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Proceed => m_Wrapper.m_Menus_Proceed;
        public InputActionMap Get() { return m_Wrapper.m_Menus; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenusActions set) { return set.Get(); }
        public void SetCallbacks(IMenusActions instance)
        {
            if (m_Wrapper.m_MenusActionsCallbackInterface != null)
            {
                @Proceed.started -= m_Wrapper.m_MenusActionsCallbackInterface.OnProceed;
                @Proceed.performed -= m_Wrapper.m_MenusActionsCallbackInterface.OnProceed;
                @Proceed.canceled -= m_Wrapper.m_MenusActionsCallbackInterface.OnProceed;
            }
            m_Wrapper.m_MenusActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Proceed.started += instance.OnProceed;
                @Proceed.performed += instance.OnProceed;
                @Proceed.canceled += instance.OnProceed;
            }
        }
    }
    public MenusActions @Menus => new MenusActions(this);
    private int m_defaultSchemeIndex = -1;
    public InputControlScheme defaultScheme
    {
        get
        {
            if (m_defaultSchemeIndex == -1) m_defaultSchemeIndex = asset.FindControlSchemeIndex("default");
            return asset.controlSchemes[m_defaultSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnPrimary(InputAction.CallbackContext context);
        void OnSecondary(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnResetPrimary(InputAction.CallbackContext context);
        void OnResetSecondary(InputAction.CallbackContext context);
    }
    public interface IMenusActions
    {
        void OnProceed(InputAction.CallbackContext context);
    }
}
